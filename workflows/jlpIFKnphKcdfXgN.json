{
  "active": true,
  "connections": {
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "JSON formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON formatting": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Globals",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-25T20:46:22.630Z",
  "id": "jlpIFKnphKcdfXgN",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Backup your credentials to GitHub",
  "nodes": [
    {
      "parameters": {},
      "id": "59c8b710-8f64-4f22-a06c-af7fc7aad9c5",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        448,
        272
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 750.8363163824032,
        "width": 2086.845881354743,
        "color": 6
      },
      "id": "cdf4b6d0-4419-4e69-9015-13de504920d1",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "6f5b93d7-8be6-4ec4-9312-cf4cfda24696",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1888,
        848
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "3448ce10-219a-400b-a041-1b7bf50c1a34",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        992,
        720
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "f393d3de-2863-4b32-84a7-50390cb97637",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        784,
        752
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "8fcb4597-d92f-44fa-b806-0bd14457f832",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        784,
        1008
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// H√†m deep sort JSON object (ƒë·ªá quy)\nconst orderJsonKeys = (value) => {\n  if (Array.isArray(value)) {\n    return value.map(orderJsonKeys);\n  } else if (value !== null && typeof value === 'object') {\n    return Object.keys(value).sort().reduce((result, key) => {\n      result[key] = orderJsonKeys(value[key]);\n      return result;\n    }, {});\n  }\n  return value;\n};\n\n// L·∫•y input an to√†n\nconst input0 = $input.all()[0]?.json || {};\nconst input1 = $input.all()[1]?.json || null;\n\nlet origWorkflow;\nlet n8nWorkflow = input1 || {}; // fallback r·ªóng n·∫øu kh√¥ng c√≥ input1\n\n// N·∫øu GitHub tr·∫£ v·ªÅ file (base64 content)\nif (input0.content) {\n  origWorkflow = JSON.parse(Buffer.from(input0.content, 'base64').toString());\n\n// N·∫øu GitHub tr·∫£ v·ªÅ file d·∫°ng data th·∫≥ng\n} else if (input0.data) {\n  origWorkflow = JSON.parse(input0.data);\n}\n\nif (origWorkflow) {\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    input0.github_status = \"same\";\n  } else {\n    input0.github_status = \"different\";\n    input0.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n\n  // üëá stringify ƒë·ªÉ tr√°nh [object Object]\n  input0.content_decoded = JSON.stringify(orderedOriginal, null, 2);\n\n} else {\n  // Workflow m·ªõi\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  input0.github_status = \"new\";\n  input0.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Lu√¥n tr·∫£ v·ªÅ object chu·∫©n n8n\nreturn [{ json: input0 }];"
      },
      "id": "fee8d025-ef70-4ef2-8e4b-771207c1fdbb",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        992,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "28aabec3-1b53-4ffa-b54a-dcb647d0e2c1",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1200,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "8ce6c378-80f6-463e-8924-7f8fe3ca9bcb",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1424,
        848
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "ad382761-9494-4f58-b719-001292754f94",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1424,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "ba15d03a-2874-4ad3-b610-357e407d3b22",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1424,
        1168
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "943245b9-1b0c-4725-94c5-919d4a63caf3",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1648,
        1168
      ],
      "webhookId": "2074ba69-69d2-45c0-bc4b-38470befa147",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "WRPTY2Hx7kqwwirI",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "c696f2b1-e3e9-4e22-9dcc-504bb1e367dc",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1648,
        992
      ],
      "webhookId": "f17ed06b-0b08-48bb-94b9-ad2fc1314602",
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "WRPTY2Hx7kqwwirI",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "04477a29-4a39-485f-b683-0adf2e7bf605",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1040,
        368
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "ac102a02-3786-4e19-8849-35c4674c1b33",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        448,
        464
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance credentials to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below üëá\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - credentials/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.",
        "height": 596.4810912485963,
        "width": 365.19481715599653,
        "color": 4
      },
      "id": "69d79c1e-42f3-4b4a-b154-ae37e1a60b75",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 434.88564057365943,
        "width": 1028.7522287279464,
        "color": 7
      },
      "id": "f92e92eb-15ac-497c-8403-603f0b876173",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        192
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "643a28d2-f609-4300-975b-399b25db49ca",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        592,
        752
      ],
      "webhookId": "d47279e5-2a81-462f-ac67-8e4b81fb23c6",
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "WRPTY2Hx7kqwwirI",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "tranhung1867"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "backup-n8n"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "credentials/"
            }
          ]
        },
        "options": {}
      },
      "id": "f37dfd48-4a0d-4c1a-a760-9546df86d800",
      "name": "Globals",
      "type": "n8n-nodes-base.set",
      "position": [
        384,
        912
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "command": "npx n8n export:credentials --all --decrypted"
      },
      "id": "acbb7143-e659-40b3-9f08-b1854190d068",
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        672,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"
      },
      "id": "b289c506-0dbc-4954-bba6-c51ea84aed0f",
      "name": "JSON formatting",
      "type": "n8n-nodes-base.code",
      "position": [
        848,
        368
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Edit this node üëá",
        "height": 80,
        "width": 150,
        "color": 4
      },
      "id": "d7df135e-6669-47cd-8086-4efb19cbad52",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        352,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "30a51c85-9f73-4935-8355-d3ced3042e1c",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1264,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "40e62c57-a3da-4bdb-aa47-40489ae0d49a",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        112,
        1024
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "### üí° **Want to learn advanced n8n skills and earn money building workflows?**\n‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚ÄéCheck out [Scrapes Academy](https://www.skool.com/scrapes/about?ref=21f10ad99f4d46ba9b8aaea8c9f58c34)",
        "width": 640,
        "color": 4
      },
      "id": "5d11286a-0ee6-40b7-a424-0f7b76d7220b",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        0
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-25T20:46:22.782Z",
      "updatedAt": "2025-09-25T20:46:22.782Z",
      "role": "workflow:owner",
      "workflowId": "jlpIFKnphKcdfXgN",
      "projectId": "quf7HR2xEtUzOS9Z"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": [
        22
      ]
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-25T21:44:27.000Z",
  "versionId": "570cef9f-901f-4cd4-95b4-8d903858abdf"
}